# Objectives
To understand existing code for performing context-switches in the xv6 kernel
To implement a basic round-robin (RR) scheduler that compensates processes that relinquish the CPU
To implement system calls that extract process states
To implement a user-level program that tests the basic compensation behavior of the scheduler

# Overview
In this project, youâ€™ll be modifying the Round Robin (RR) CPU scheduler in xv6 so that processes can have different time-slice lengths 
and are "compensated" in different ways for the amount of time they are blocked (and thus cannot be scheduled).
Particularly useful for this project: Chapter 5 (https://pdos.csail.mit.edu/6.828/2018/xv6/book- rev11.pdf) in xv6 book.
In this document we:
1. specify how your new xv6 scheduler (CRR) must behave 2. specify the new system calls you must add
3. specify the simple user-level application you must write 4. describe the existing xv6 scheduling implementation
5. give suggestions for implementing this project
6. specify other requirements for completing this project

# 1) Compensated Round-Robin (CRR) Scheduler Requirements
The current xv6 scheduler implements a very simple Round Robin (RR) policy. For example, if there are three processes A, B and C, then 
the xv6 round-robin scheduler will run the jobs in the order A B C A B C ... , where each letter represents a process. The xv6 scheduler 
runs each process for at most one timer tick (10 ms); after each timer tick, the scheduler moves the previous job to the end of the ready 
queue and dispatches the next job in the list. The xv6 scheduler does not do anything special when a process sleeps or blocks (and is unable 
to be scheduled); the blocked job is simply skipped until it is ready and it is again its turn in the RR order.
 You will implement a new Compensated RR scheduler with three new features:
   1. Different time-slice lengths (i.e., a different number of timer ticks) for different processes
   2. Compensating processes for the amount of time they were blocked by scheduling those processes for a longer time-slice when they awake
   3. Improving the sleep/wakeup mechanism so that processes are unblocked only after their sleep interval has expired, instead of on every 10 ms timer tick











NOTE: we have stopped maintaining the x86 version of xv6, and switched
our efforts to the RISC-V version
(https://github.com/mit-pdos/xv6-riscv.git)

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern x86-based multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also https://pdos.csail.mit.edu/6.828/, which
provides pointers to on-line resources for v6.

xv6 borrows code from the following sources:
    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
    FreeBSD (ioapic.c)
    NetBSD (console.c)

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by Silas
Boyd-Wickizer, Anton Burtsev, Cody Cutler, Mike CAT, Tej Chajed, eyalz800,
Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, Peter
Froehlich, Yakir Goaron,Shivam Handa, Bryan Henry, Jim Huang, Alexander
Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Eddie Kohler, Austin
Liew, Imbar Marinescu, Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi
Merimovich, Mark Morrissey, mtasm, Joel Nider, Greg Price, Ayan Shafqat,
Eldar Sehayek, Yongming Shen, Cam Tenny, tyfkda, Rafael Ubal, Warren
Toomey, Stephen Tu, Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas
Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, and Zou Chang Wei.

The code in the files that constitute xv6 is
Copyright 2006-2018 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

We don't process error reports (see note on top of this file).

BUILDING AND RUNNING XV6

To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run
"make". On non-x86 or non-ELF machines (like OS X, even on x86), you
will need to install a cross-compiler gcc suite capable of producing
x86 ELF binaries (see https://pdos.csail.mit.edu/6.828/).
Then run "make TOOLPREFIX=i386-jos-elf-". Now install the QEMU PC
simulator and run "make qemu".
